import { Router } from 'express';
import { 
  fazerLogin, 
  obterDadosUsuario, 
  validarToken, 
  testeAuth,
  cadastrarUsuario,
  criarAluno
} from '../controllers/autenticacaoController';
import { 
  autenticacao, 
  apenasAdministrador 
} from '../middleware/autenticacaoMiddleware';

/**
 * Rotas de autentica√ß√£o
 * Baseado no authRoutes.js do MVP mas adaptado para TypeScript
 * e nomenclatura em portugu√™s
 */
const router = Router();

/**
 * Middleware de log para todas as rotas de autentica√ß√£o
 */
router.use((req, res, next) => {
  console.log(`üîÑ Rota de autentica√ß√£o acessada: ${req.method} ${req.originalUrl}`);
  console.log(`üìÖ Timestamp: ${new Date().toISOString()}`);
  next();
});

/**
 * @route GET /api/auth/teste
 * @desc Rota de teste para verificar se o m√≥dulo est√° funcionando
 * @access P√∫blico
 */
router.get('/teste', testeAuth);

/**
 * @route POST /api/auth/login
 * @desc Login unificado para alunos e administradores
 * @access P√∫blico
 */
router.post('/login', fazerLogin);

/**
 * @route POST /api/auth/cadastrarUsuario
 * @desc Cadastra um novo usu√°rio (cadastro geral)
 * @access P√∫blico
 */
router.post('/cadastrarUsuario', cadastrarUsuario);

/**
 * @route POST /api/auth/validar
 * @desc Valida se um token JWT √© v√°lido
 * @access P√∫blico
 */
router.post('/validar', validarToken);

/**
 * @route GET /api/auth/me
 * @desc Obt√©m dados do usu√°rio logado
 * @access Privado (requer token JWT v√°lido)
 */
router.get('/me', autenticacao, obterDadosUsuario);

export default router; 